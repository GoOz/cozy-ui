/*------------------------------------*\
  Mixins
  =====

  This file contains mixins:
  - font-size()
  - em()
\*------------------------------------*/

// Tools
//
// Weight: -9
//
// Styleguide Tools

// Mixins
//
// Available mixins
//
// Styleguide Tools.mixins

// font-size($size)
//
// font-size() mixin allows you to write font-size in pixels and get the
// equivalent size in em.
//
// You can even skip the parenthesis and write it as basic font-size
// declaration.
//
// N.B: If you write rem instead of px, the mixin won't trigger and the basic
// font-size declaration will apply.
//
// $size - The size en pixel you want your text in
//
// Weight: 1
//
// Styleguide Tools.mixins.fontsize

// @stylint off
use('../scripts/checksum.js')
use('../scripts/split.js')

// Contextual fonts store, based on the selector checksum hash
basefonts = {}

// contextual-basefont takes a selector string as input, and try to get the
// basefont in this context. If it doesn't explcitely exists, it checks its
// parent, etc, and fallback to the global basefont.
context-basefont(selector)
    parent = split(' ', selector)
    pop(parent)
    if length(parent) > 1
        parent = join(' ', parent)

    if length(parent) is 0
        basefont
    else if (_parentId = checksum(parent)) in basefonts
        basefonts[_parentId]
    else
        context-basefont(unquote(parent))


// A handy replacement for the `font-size` property. Just use it as usual:
// `font-size: <n>` (colon is optionnal). It converts pixels to `em`.
// To achieve this magic, it stores the font-size base for each context
// so that it can revert the `em` cascade when converting.

// It bails out if you use `rem` as you do not need to revert the cascade with
// rem as it refers already to the root font-size.
font-size(n)
    currentBasefont = context-basefont(selector())

    unitName=unit(n)
    if unitName is 'px'
        font-size em(n, currentBasefont)
    else
        font-size n

    _id = checksum(selector())
    if unitName is 'em'
        currentBasefont = context-basefont(selector())
        n = unit(n * currentBasefont, 'px')
    basefonts[_id] = n


// em($size)
//
// em() mixin basically converts pixel sizes in em according to its context.
// More generic mixin than font-size() but it does exactly the same job.
//
// $size - The size in pixel you want to be converted in em
//
// Weight: 0
//
// Styleguide Tools.mixins.em

// Returns the given value in _EM_. If the inital value is given in _PX_, it
//  applies a conversion to _EM_ based on the contextual basefont size.
em(n, base = null)
    if base is not null
        basefont = base
    else
        _id = checksum(selector())
        if _id in basefonts
            basefont = basefonts[_id]
        else
            basefont = context-basefont(selector())

    if unit(n) is 'px'
        val = round(n / basefont, 5)
    else
        val = n
    unit(val, 'em')


// We need a base font-size for _px to em_ computation. We assume those size to
// be 16px (as default desktop browsers), but it really don't care as well as
// all relative units should be expressed in `em`
basefont = 16px

// hide()
//
// hide() mixin definitely hides an element. This mixin doesn't take parameters.
//
// Weight: 2
//
// Styleguide Tools.mixins.hide
hide()
    display     none
    visibility  hidden


// reset()
//
// reset() mixin removes every padding, margin and border of an element.
// This mixin doesn't take parameters.
//
// Weight: 3
//
// Styleguide Tools.mixins.reset
reset()
    margin  0
    padding 0
    border  0

// (x-)padded($p1, $p2)
//
// (x-)padded() mixin adds a padding to an element according to the direction
// you choose where 'x' is the direction.
//
// Available direction are : 'top', 'bottom', 'left', 'right', 'vertically'
// (top & bottom), 'horizontally' (left & right) or if you don't specify
// direction the size will be set on all sides (top, left, bottom, right)
//
// $p1 - Padding size in pixel you want that will be converted in em
// $p2 - (optional) Needed for horizontally-padded, it refers to the size
// in pixel you want that will be converted in em
//
// Weight: 4
//
// Styleguide Tools.mixins.padded

top-padded(n = 1em)
    padding-top em(n)

bottom-padded(n = 1em)
    padding-bottom em(n)

left-padded(n = 1em)
    padding-left em(n)

right-padded(n = 1em)
    padding-right em(n)

vertically-padded(n = 1em)
    top-padded    n
    bottom-padded n

horizontally-padded(n = 1em)
    left-padded  n
    right-padded n

padded(n = 1em, h = n)
    vertically-padded   n
    horizontally-padded h

// (x-)spaced($m1, $m2)
//
// (x-)padded() mixin adds a margin to an element according to the direction
// you choose where 'x' is the direction.
//
// Available direction are : 'top', 'bottom', 'left', 'right', 'vertically'
// (top & bottom), 'horizontally' (left & right) or if you don't specify
// direction the size will be set on all sides (top, left, bottom, right)
//
// $m1 - Margin size in pixel you want that will be converted in em
// $m2 - (optional) Needed for horizontally-spaced, it refers to the size
// in pixel you want that will be converted in em
//
// Weight: 5
//
// Styleguide Tools.mixins.spaced

top-spaced(n = 1em)
    margin-top em(n)

bottom-spaced(n = 1em)
    margin-bottom em(n)

left-spaced(n = 1em)
    margin-left em(n)

right-spaced(n = 1em)
    margin-right em(n)

vertically-spaced(n = 1em)
    top-spaced    n
    bottom-spaced n

horizontally-spaced(n = 1em)
    left-spaced  n
    right-spaced n

spaced(n = 1em, h = n)
    vertically-spaced   n
    horizontally-spaced h

// @stylint on
